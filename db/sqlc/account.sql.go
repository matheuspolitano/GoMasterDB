// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package db

import (
	"context"
)

const addAccount = `-- name: AddAccount :one
INSERT INTO accounts (username, ammount, currency) 
VALUES ($1, $2, $3)
RETURNING id, username, ammount, currency, created_at
`

type AddAccountParams struct {
	Username string
	Ammount  int64
	Currency string
}

func (q *Queries) AddAccount(ctx context.Context, arg AddAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccount, arg.Username, arg.Ammount, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Ammount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, username, ammount, currency, created_at FROM accounts
WHERE id=$1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Ammount,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const removeAccount = `-- name: RemoveAccount :exec
DELETE FROM accounts
where id=$1
`

func (q *Queries) RemoveAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, removeAccount, id)
	return err
}
